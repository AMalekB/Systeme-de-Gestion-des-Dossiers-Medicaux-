generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEDECIN
  PATIENT
}

model Utilisateur {
  id             Int             @id @default(autoincrement())
  nom            String
  email          String          @unique
  motDePasse     String
  role           Role

  medecin        Medecin?
  administrateur Administrateur?
  patient        Patient?         // ðŸ”„ AjoutÃ© : relation avec Patient
}

model Patient {
  id             Int              @id @default(autoincrement())
  nom            String
  prenom         String
  dateNaissance  DateTime
  adresse        String
  telephone      String

  utilisateurId  Int              @unique
  utilisateur    Utilisateur      @relation(fields: [utilisateurId], references: [id])

  dossierMedical DossierMedical?
  allergies      Allergie[]
  rendezVous     RendezVous[]
}



model Allergie {
  id        Int     @id @default(autoincrement())
  nom       String
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int
}

model Medecin {
  id             Int           @id @default(autoincrement())
  specialite     String
  utilisateur    Utilisateur   @relation(fields: [utilisateurId], references: [id])
  utilisateurId  Int           @unique

  prescriptions  Prescription[]
  rendezVous     RendezVous[]
  historique     Historique[]
  dossiers       DossierMedical[]
}

model Administrateur {
  id            Int           @id @default(autoincrement())
  utilisateur   Utilisateur   @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int           @unique
}

model DossierMedical {
  id                Int               @id @default(autoincrement())
  historiqueMedical String?
  notesMedecin      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  patient   Patient       @relation(fields: [patientId], references: [id])
  patientId Int           @unique

  medecin   Medecin?      @relation(fields: [medecinId], references: [id])
  medecinId Int?

  prescriptions     Prescription[]
  historique        Historique[]
}

model Prescription {
  id          Int                      @id @default(autoincrement())
  date        DateTime                 @default(now())
  description String?

  dossier     DossierMedical           @relation(fields: [dossierId], references: [id])
  dossierId   Int
  medecin     Medecin                  @relation(fields: [medecinId], references: [id])
  medecinId   Int

  items       PrescriptionMedicament[]
}

model Medicament {
  id       Int                       @id @default(autoincrement())
  nom      String

  liens    PrescriptionMedicament[]
}

model PrescriptionMedicament {
  prescription   Prescription  @relation(fields: [prescriptionId], references: [id])
  prescriptionId Int
  medicament     Medicament    @relation(fields: [medicamentId], references: [id])
  medicamentId   Int

  dosage         String?
  frequence      String?
  duree          String?
  instructions   String?

  @@id([prescriptionId, medicamentId])
}

model Historique {
  id           Int             @id @default(autoincrement())
  dossier      DossierMedical  @relation(fields: [dossierId], references: [id])
  dossierId    Int
  medecin      Medecin         @relation(fields: [medecinId], references: [id])
  medecinId    Int
  date         DateTime        @default(now())
  type         String
  contenu      String
}

model RendezVous {
  id               Int       @id @default(autoincrement())
  date             DateTime
  heure            String
  typeConsultation String
  rappel           Boolean

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int

  medecin   Medecin @relation(fields: [medecinId], references: [id])
  medecinId Int
}
